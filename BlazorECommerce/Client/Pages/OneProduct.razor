@page "/product"
@page "/product/{id:long}"

@if (id == null)
{
    <PageTitle>Create New Product</PageTitle>
    <h3>Create New Product</h3>
} else
{
    <PageTitle>Edit @product.Name</PageTitle>
    <h3>Edit @product.Name</h3>
}

<EditForm Model="product" OnSubmit="HandleSubmit">
    <div class="row">
        <div class="col-md-3">
            <label for="proName">Name</label>
            <InputText id="proName" @bind-Value="product.Name" class="form-control"></InputText>
        </div>
        <div class="col-md-3">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        <div class="col-md-3">
            <label for="desc">Description</label>
            <InputTextArea id="desc" @bind-Value="product.Description" class="form-control"></InputTextArea>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteProduct">Delete Product</button>
</EditForm>

@code {
    [Parameter]
    public long? id { get; set; }

    string btnText = string.Empty;

    Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        btnText = id == null ? "Add New Product" : "Edit Product";
    }
    protected override async Task OnParametersSetAsync()
    {
        if(id == null)
        {

        } else
        {
            product = await productService.GetOne((long)id);
        }
    }

    async Task HandleSubmit()
    {
        if(id == null)
        {
            await productService.Create(product);
        } else
        {
            await productService.Update(product);
        }
    }

    async Task DeleteProduct()
    {
        await productService.Delete(product.Id);
    }
}
